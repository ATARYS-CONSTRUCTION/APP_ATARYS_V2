# R√àGLES CURSOR - PROJET ATARYS
# M√©thodologie obligatoire pour d√©veloppement coh√©rent

## üîç CONSULTATION DOCUMENTATION OBLIGATOIRE

### AVANT TOUT D√âVELOPPEMENT, TOUJOURS :
1. Consulter docs/04-outils-templates/CHECKLIST_DEVELOPPEMENT.md
2. Lire documentation pertinente selon contexte :
   - docs/01-guides-principaux/DEV_MASTER.md (Document central - Vision globale)
   - docs/03-regles-standards/WORKFLOWS.md (Standards et workflow)
   - docs/03-regles-standards/REGLES METIERS.md (R√®gles business)
   - docs/02-architecture/API_ENDPOINTS.md (APIs existantes)
   - docs/02-architecture/DATABASE_SCHEMA.md (Structure BDD)
   - docs/02-architecture/ATARYS_ARCHITECTURE.md (Architecture technique)
   - docs/03-regles-standards/ERREURS_IMPLANTATION_DONNEES.md (Erreurs et solutions)

### QUESTIONS OBLIGATOIRES √Ä SE POSER :
- Cette fonctionnalit√© existe-t-elle d√©j√† ?
- Quel module ATARYS (1.1 √† 13.x) est concern√© ?
- Y a-t-il des standards ATARYS √† respecter ?
- Y a-t-il des r√®gles m√©tier sp√©cifiques ?
- L'architecture actuelle couvre-t-elle ce besoin ?

## üèóÔ∏è WORKFLOW D√âVELOPPEMENT ATARYS

### BACKEND - Ordre obligatoire :
1. Mod√®le : backend/app/models/ selon structure SQLite
2. Service : backend/app/services/ pour logique m√©tier  
3. Routes : backend/app/routes/ avec blueprint
4. Tests : backend/tests/ selon template existant
5. Documentation : Mettre √† jour docs concern√©es

### FRONTEND - Standards ATARYS :
- Layout : Utiliser PageLayout et GridLayout
- Nomenclature : Nommage selon module (ex: Module3_1.jsx)
- UI/UX : Padding 16px, gap-3, responsive
- API : Format standardis√© {success, data, message}

## üîß STANDARDS TECHNIQUES ATARYS V2

### STACK TECHNOLOGIQUE OBLIGATOIRE :
- **Backend** : Flask 3.0+ + SQLAlchemy 2.0+ + Factory pattern
- **Frontend** : React 18.2.0 + Vite 5.4.19 + Tailwind CSS 3.4.1
- **Base de donn√©es** : SQLite avec BaseModel pattern
- **API** : REST format `{success, data, message}`

### MOD√àLES SQLALCHEMY - Standards obligatoires :
```python
# TOUJOURS utiliser BaseModel comme parent
class ExampleModel(BaseModel):
    __tablename__ = 'example_table'
    
    # OBLIGATOIRE : Montants financiers en Numeric(10, 2)
    montant_ht = db.Column(db.Numeric(10, 2), default=0.00)
    
    # OBLIGATOIRE : Strings avec longueur max
    nom = db.Column(db.String(100), nullable=False)
    
    # OBLIGATOIRE : M√©thode __repr__ explicite
    def __repr__(self):
        return f"<{self.__class__.__name__} {self.nom}>"
```

### CONFIGURATION FLASK - Pattern obligatoire :
```python
# TOUJOURS utiliser Factory pattern
def create_app(config_name='development'):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    
    db.init_app(app)
    migrate.init_app(app, db)
    
    return app
```

### API REST - Format standardis√© obligatoire :
```json
{
  "success": true,
  "data": [...],
  "message": "Op√©ration r√©ussie",
  "pagination": {
    "page": 1,
    "per_page": 50,
    "total": 100,
    "has_next": true
  }
}
```

### TYPES DE DONN√âES - R√®gles strictes :
- **Montants financiers** : `db.Numeric(10, 2)` OBLIGATOIRE
- **Mesures techniques** : `db.Float` autoris√©
- **Textes courts** : `db.String(longueur_max)` avec limite
- **Textes longs** : `db.Text` pour descriptions
- **Dates** : `db.DateTime` avec `default=datetime.utcnow`

### URLS ET PORTS - Standards fixes :
- **Frontend** : http://localhost:3000 (React + Vite)
- **Backend** : http://localhost:5000 (Flask + SQLAlchemy)
- **Proxy API** : `/api/*` ‚Üí `localhost:5000`

### BASE DE DONN√âES - Emplacement obligatoire :
- **Base SQLite** : `/data/atarys_data.db` (racine du projet)
- **Configuration** : `sqlite:///../../data/atarys_data.db` dans Flask
- **Scripts** : Toujours r√©f√©rencer `/data/` depuis la racine
- **Interdiction** : JAMAIS de base de donn√©es dans `/backend/`

### CONVENTIONS NOMMAGE - R√®gles strictes :
- **Modules** : Num√©rotation 1-13 selon ATARYS_MODULES.md
- **Sous-modules** : X.Y (ex: 1.1, 1.2)
- **Composants React** : PascalCase (`Module3_1.jsx`)
- **Fichiers backend** : snake_case (`module_3_1.py`)
- **APIs** : kebab-case (`/api/calcul-ardoises`)
- **Tables** : snake_case (`chantiers_etats`)

### VALIDATION - Standards obligatoires :
- **Pagination** : 50 √©l√©ments par page par d√©faut
- **Validation** : Marshmallow pour tous les endpoints
- **Erreurs** : Middleware centralis√© avec codes HTTP
- **Logging** : Logs structur√©s dans logs/atarys.log

## üìÅ ORGANISATION DOSSIERS OBLIGATOIRE

### CR√âATION FICHIERS - R√®gles strictes :
- **Scripts Python** ‚Üí backend/scripts/ (utilitaires, extraction, maintenance)
- **Mod√®les/Services/Routes** ‚Üí backend/app/ (structure Flask)
- **Pages React** ‚Üí frontend/src/pages/ (modules ATARYS)
- **Composants** ‚Üí frontend/src/components/ (r√©utilisables)
- **Documentation** ‚Üí docs/ (tous les .md)
- **Donn√©es** ‚Üí data/ (JSON, CSV de r√©f√©rence)
- **Scripts batch** ‚Üí .bat/ (PowerShell, batch Windows)
- **Tests** ‚Üí backend/tests/ ou frontend/tests/

### INTERDICTIONS ABSOLUES :
‚ùå **JAMAIS cr√©er de fichiers √† la racine** (sauf configuration)
‚ùå **JAMAIS m√©langer backend/frontend** dans le m√™me dossier
‚ùå **JAMAIS de scripts Python** dans frontend/
‚ùå **JAMAIS de fichiers React** dans backend/
‚ùå **JAMAIS utiliser Float pour les montants** (toujours Numeric)
‚ùå **JAMAIS cr√©er de mod√®les sans BaseModel** 
‚ùå **JAMAIS d'APIs sans format {success, data, message}**
‚ùå **JAMAIS de String sans longueur max** dans les mod√®les
‚ùå **JAMAIS inventer de tables ou structures sans demande explicite**
‚ùå **JAMAIS utiliser && dans PowerShell Windows** (utiliser ; ou s√©parer les commandes)
‚ùå **JAMAIS de base de donn√©es dans /backend/** (toujours dans /data/)

## üö® R√àGLES D'OR CURSOR

1. **JAMAIS de code sans avoir lu la doc pertinente**
2. **TOUJOURS v√©rifier si √ßa existe d√©j√†**
3. **RESPECTER l'architecture et nomenclature ATARYS (modules 1.1 √† 13.x)**
4. **METTRE √Ä JOUR la documentation apr√®s d√©veloppement**
5. **JAMAIS affirmer que "√ßa marche" ou "c'est op√©rationnel" sans test r√©el et validation concr√®te**
6. **TOUJOURS utiliser les standards techniques V2** (BaseModel, Numeric, Factory pattern)
7. **JAMAIS inventer de tables, liens ou structures sans consentement explicite de l'utilisateur**
8. **TOUJOURS demander confirmation avant de cr√©er des √©l√©ments non document√©s**
9. **RESPECTER les commandes PowerShell Windows** (pas de &&, utiliser ; ou s√©parer les commandes)
10. **TOUJOURS r√©f√©rencer la base de donn√©es dans /data/** (pas dans /backend/)

## üìö RACCOURCIS DOCUMENTATION

- docs/README.md - Point d'entr√©e navigation
- docs/01-guides-principaux/QUICK_START.md - Guide 2 minutes
- docs/01-guides-principaux/DEV_MASTER.md - Document central
- docs/03-regles-standards/WORKFLOWS.md - Workflow et standards
- docs/03-regles-standards/REGLES METIERS.md - R√®gles business
- docs/02-architecture/API_ENDPOINTS.md - Toutes les APIs
- docs/02-architecture/DATABASE_SCHEMA.md - Structure compl√®te
- docs/02-architecture/ATARYS_ARCHITECTURE.md - Architecture technique

## üîß R√âSOLUTION PROBL√àMES

1. Logs : Consulter logs/atarys.log
2. Base donn√©es : V√©rifier avec analyze_real_db.py
3. APIs : Tester avec scripts disponibles
4. Frontend : V√©rifier proxy Vite vers backend

## üéØ EXEMPLES APPLICATION

### Erreur technique (ex: "Unexpected token") :
1. ‚úÖ Consulter docs/03-regles-standards/WORKFLOWS.md
2. ‚úÖ V√©rifier docs/02-architecture/API_ENDPOINTS.md
3. ‚úÖ Analyser logs/atarys.log
4. ‚úÖ Appliquer solution selon standards

### Nouvelle fonctionnalit√© :
1. ‚úÖ Identifier module concern√© (ex: 3.1 Liste Chantiers)
2. ‚úÖ Consulter docs/03-regles-standards/REGLES METIERS.md
3. ‚úÖ V√©rifier docs/02-architecture/ATARYS_ARCHITECTURE.md
4. ‚úÖ Suivre workflow backend ‚Üí frontend ‚Üí tests

### Cr√©ation d'un mod√®le SQLAlchemy :
1. ‚úÖ H√©riter de BaseModel OBLIGATOIRE
2. ‚úÖ Utiliser db.Numeric(10, 2) pour les montants
3. ‚úÖ D√©finir __tablename__ et __repr__
4. ‚úÖ Ajouter validations Marshmallow
5. ‚úÖ Cr√©er le service associ√©
6. ‚úÖ Cr√©er les routes API REST

A la fin d'une op√©ration les fichiers test et tous les fichiers inutiles pour l'app doivent √™tre supprim√©s.

**Cette m√©thodologie doit √™tre appliqu√©e SYST√âMATIQUEMENT pour maintenir la coh√©rence du projet ATARYS !** 

## üö¶ R√®gles ATARYS pour la cr√©ation de routes/API
- **TOUJOURS** :
  - Cr√©er un sch√©ma Marshmallow pour chaque ressource expos√©e
  - Enregistrer le blueprint dans `create_app`
  - Ajouter la d√©pendance dans `requirements` si besoin
  - Activer CORS dans le backend
  - Tester l'API en direct avant toute int√©gration frontend
- **JAMAIS** :
  - Laisser un endpoint sans sch√©ma de validation
  - Oublier d'ajouter la d√©pendance dans requirements
  - Oublier d'activer CORS si le frontend consomme l'API
  - Int√©grer une API non test√©e c√¥t√© backend

## üö® ERREURS D'IMPLANTATION - BONNES PRATIQUES

### **ERREURS 400 (BAD REQUEST) - PR√âVENTION :**
- ‚úÖ **TOUJOURS valider les donn√©es c√¥t√© frontend** avant envoi √† l'API
- ‚úÖ **Filtrer les lignes vides** avant envoi
- ‚úÖ **Convertir les types de donn√©es** (string ‚Üí number, boolean)
- ‚úÖ **V√©rifier les champs obligatoires** (reference, libelle, etc.)

### **ERREURS CORS - PR√âVENTION :**
- ‚úÖ **TOUJOURS g√©rer OPTIONS** pour les routes DELETE/PUT/PATCH
- ‚úÖ **Activer CORS** dans Flask avec flask-cors
- ‚úÖ **Tester les requ√™tes cross-origin** avant d√©ploiement

### **VALIDATION DES DONN√âES - STANDARDS :**
```javascript
// ‚úÖ TOUJOURS filtrer avant envoi
const validData = data.filter(item => {
  return item.reference && item.reference.trim() !== '' && 
         item.libelle && item.libelle.trim() !== '';
});

// ‚úÖ TOUJOURS convertir les types
const cleanedData = validData.map(item => {
  const cleaned = { ...item };
  if (cleaned.prix_achat !== undefined) {
    cleaned.prix_achat = Number(cleaned.prix_achat) || 0;
  }
  return cleaned;
});
```

### **GESTION DES DOUBLONS - LOGIQUE UPSERT :**
```python
# ‚úÖ TOUJOURS v√©rifier l'existence avant insertion
existing_item = Model.query.filter_by(unique_field=value).first()
if existing_item:
    # Mise √† jour
    for key, value in data.items():
        setattr(existing_item, key, value)
else:
    # Cr√©ation
    new_item = Model(**data)
    db.session.add(new_item)
```

### **INTERFACE UTILISATEUR - ROBUSTESSE :**
- ‚úÖ **Boutons de nettoyage** pour supprimer les lignes vides
- ‚úÖ **Messages d'erreur explicites** avec contexte
- ‚úÖ **Validation en temps r√©el** des champs obligatoires
- ‚úÖ **Confirmation utilisateur** pour les actions destructives

### **TESTS ET D√âBOGAGE :**
- ‚úÖ **Scripts de test API** pour valider les endpoints
- ‚úÖ **Logs d√©taill√©s** c√¥t√© frontend et backend
- ‚úÖ **Validation des donn√©es** √† chaque √©tape
- ‚úÖ **Gestion d'erreurs** avec rollback en cas d'√©chec

### **DOCUMENTATION DES ERREURS :**
- ‚úÖ **Consulter docs/03-regles-standards/ERREURS_IMPLANTATION_DONNEES.md**
- ‚úÖ **Documenter chaque erreur** rencontr√©e
- ‚úÖ **Partager les solutions** avec l'√©quipe
- ‚úÖ **Mettre √† jour les bonnes pratiques** r√©guli√®rement 